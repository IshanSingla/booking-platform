generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// User table
model User {
  id          String    @id @default(uuid()) @map("_id")
  name        String?
  phoneNumber String    @unique(map: "phoneNumber_1")
  role        Role?
  loginIp     String?
  loginDevice String?
  email       String?
  disabled    Boolean   @default(false)
  createdAt   DateTime? @default(now()) @db.Date
  updatedAt   DateTime? @updatedAt @db.Date
  organizations Organization[]
  requests     Request[]
}

enum Role {
  SUPERADMIN
  ADMIN
  STUDENT
  ORGANIZATION
}

// Otp table for phone number OTPs
model PhoneOtp {
  id          String    @id @default(uuid()) @map("_id")
  phoneNumber String
  otp         String
  expTime     DateTime  @db.Date
  createdAt   DateTime? @default(now()) @db.Date
  updatedAt   DateTime? @updatedAt @db.Date
}

// Category table
model Category {
  id          String    @id @default(uuid()) @map("_id")
  name        String
  description String?
  image       String?
  createdAt   DateTime? @default(now()) @db.Date
  updatedAt   DateTime? @updatedAt @db.Date
}

// Organization table
model Organization {
  id          String    @id @default(uuid()) @map("_id")
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?

  address     String?
  pincode     String?
  isVerified  Boolean   @default(false)
  phoneNumber String?
  email       String?

  boardName            String
  affiliationNumber    String
  orgName              String
  passPercentage       String

  extracurricular      Extracurricular @relation(fields: [extracurricularId], references: [id])
  extracurricularId    String

  infrastructure       Infrastructure @relation(fields: [infrastructureId], references: [id])
  infrastructureId     String

  teacherStudentRatio  String

  timings              Timing         @relation(fields: [timingId], references: [id])
  timingId             String

  affordability        Affordability  @relation(fields: [affordabilityId], references: [id])
  affordabilityId      String

  transportFacility    Boolean
  youtubeLink          String?

  createdAt   DateTime? @default(now()) @db.Date
  updatedAt   DateTime? @updatedAt @db.Date
  requests    Request[]
}

model Extracurricular {
  id         String    @id @default(uuid()) @map("_id")
  sports     Boolean @default(false)
  arts       Boolean @default(false)
  music      Boolean @default(false)
  debate     Boolean @default(false)
  community  Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization[]

}

model Infrastructure {
  id           String     @id @default(uuid()) @map("_id")
  smartClass   Boolean @default(false)
  library      Boolean @default(false)
  laboratories Boolean @default(false)
  playground   Boolean @default(false)
  computerLab  Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization[]
}

model Timing {
  id        String    @id @default(uuid()) @map("_id")
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization[]
}

model Affordability {
  id            String     @id @default(uuid()) @map("_id")
  admissionFee  String
  monthlyFee    String
  scholarships Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization[]
}

// Requests table
model Request {
  id             String       @id @default(uuid()) @map("_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  user           User        @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime?    @default(now()) @db.Date
  updatedAt      DateTime?    @updatedAt @db.Date
}
